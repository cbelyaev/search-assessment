/* 
 * Searcher API
 *
 * Web API for Searcher Assessment project.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Represents a class for the user login result.
    /// </summary>
    [DataContract]
    public partial class LoginResultDto :  IEquatable<LoginResultDto>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LoginResultDto" /> class.
        /// </summary>
        /// <param name="user">Gets or sets the Searcher.Models.UserDto instance..</param>
        /// <param name="token">Gets or sets the security token..</param>
        /// <param name="errorMessage">Gets or sets the error message..</param>
        public LoginResultDto(UserDto user = default(UserDto), string token = default(string), string errorMessage = default(string))
        {
            this.User = user;
            this.Token = token;
            this.ErrorMessage = errorMessage;
        }
        
        /// <summary>
        /// Gets or sets the Searcher.Models.UserDto instance.
        /// </summary>
        /// <value>Gets or sets the Searcher.Models.UserDto instance.</value>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public UserDto User { get; set; }

        /// <summary>
        /// Gets or sets the security token.
        /// </summary>
        /// <value>Gets or sets the security token.</value>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public string Token { get; set; }

        /// <summary>
        /// Gets or sets the error message.
        /// </summary>
        /// <value>Gets or sets the error message.</value>
        [DataMember(Name="errorMessage", EmitDefaultValue=false)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LoginResultDto {\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LoginResultDto);
        }

        /// <summary>
        /// Returns true if LoginResultDto instances are equal
        /// </summary>
        /// <param name="input">Instance of LoginResultDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LoginResultDto input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.ErrorMessage == input.ErrorMessage ||
                    (this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(input.ErrorMessage))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.ErrorMessage != null)
                    hashCode = hashCode * 59 + this.ErrorMessage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
